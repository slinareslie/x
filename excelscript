Add-Type -AssemblyName System.Windows.Forms

function Generate-PlantUMLMindMap {
    param(
        [string]$directoryPath,
        [string]$outputFile
    )

    # Verificar si la ruta es v√°lida
    if (-Not (Test-Path $directoryPath)) {
        Write-Host "La ruta no existe: $directoryPath"
        return
    }

    # Usamos un ArrayList para acumular las l√≠neas
    $lines = [System.Collections.ArrayList]::new()
    $null = $lines.Add("@startmindmap")
    $null = $lines.Add("* $directoryPath")

    # Funci√≥n recursiva para procesar carpetas y archivos
    function Process-Directory {
        param(
            [string]$dirPath,
            [int]$level
        )

        try {
            # Obtener archivos en el directorio
            $files = Get-ChildItem -Path $dirPath -File -ErrorAction Stop
            foreach ($file in $files) {
                $indent = "*" * ($level + 1)
                $null = $lines.Add("$indent $($file.Name)")
            }

            # Obtener subdirectorios
            $subDirs = Get-ChildItem -Path $dirPath -Directory -ErrorAction Stop
            foreach ($subDir in $subDirs) {
                $indent = "*" * ($level + 1)
                $null = $lines.Add("$indent $($subDir.Name)")
                Process-Directory -dirPath $subDir.FullName -level ($level + 1)
            }
        }
        catch {
            # Ignorar errores por rutas inexistentes o inaccesibles
        }
    }

    # Procesar la carpeta ra√≠z
    Process-Directory -dirPath $directoryPath -level 1
    $null = $lines.Add("@endmindmap")

    try {
        $lines | Out-File -FilePath $outputFile -Encoding UTF8 -ErrorAction Stop
        Write-Host "`n‚úÖ Mindmap generado correctamente en:`n$outputFile`n"
    }
    catch {
        Write-Host "`n‚ùå Error al guardar el archivo:`n$_`n"
    }
}

# Solicitar al usuario que ingrese la ruta de la carpeta a mapear
$path = Read-Host "üóÇÔ∏è Ingresa la ruta de la carpeta que deseas mapear"

# Cuadro de di√°logo para guardar el archivo
$SaveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
$SaveFileDialog.InitialDirectory = [Environment]::GetFolderPath("Desktop")
$SaveFileDialog.Filter = "Text Files (*.txt)|*.txt|All Files (*.*)|*.*"
$SaveFileDialog.FileName = "mindmap_output.txt"
$SaveFileDialog.Title = "Guardar archivo de Mindmap como..."

$null = $SaveFileDialog.ShowDialog()

if ($SaveFileDialog.FileName -ne "") {
    $outputFile = $SaveFileDialog.FileName
    Generate-PlantUMLMindMap -directoryPath $path -outputFile $outputFile
} else {
    Write-Host "`n‚ö†Ô∏è Operaci√≥n cancelada: no se gener√≥ ning√∫n archivo.`n"
}
