# =============================================================================
# Script:     actualizarPlantilla.ps1
# Descripci√≥n: Toma el archivo Excel m√°s reciente generado con datos de TAERMI,
#              lo procesa para generar estad√≠sticas, aplicar formato, ordenarlo
#              y generar un reporte en PDF consolidado para presentaci√≥n.
# Autor:      Sebastian Tomas Linares Liendo
# Fecha:      31/07/2025
# =============================================================================

# ======================= CONFIGURACI√ìN INICIAL =======================

$baseFolder = "D:\Sunat\Automatizar Excel SQL\final\"
$inputFolder = Join-Path $baseFolder "excelbase"
$outputExcelPath = Join-Path $baseFolder "excel"
$outputPdfPath = Join-Path $baseFolder "pdf"

# ======================= FUNCIONES AUXILIARES =======================

function Get-LatestFile {
    param (
        [string]$folder,
        [string]$pattern
    )
    return Get-ChildItem -Path $folder -Filter $pattern |
    Sort-Object LastWriteTime -Descending |
    Select-Object -First 1
}

function Close-ExcelProcess {
    param (
        [int[]]$initialPIDs
    )
    $finalPIDs = (Get-Process -Name "EXCEL" -ErrorAction SilentlyContinue).Id
    $createdPIDs = $finalPIDs | Where-Object { $initialPIDs -notcontains $_ }
    foreach ($procId in $createdPIDs) {
        Stop-Process -Id $procId -Force -ErrorAction SilentlyContinue
    }
}

function Invoke-ComObjectRelease {
    param (
        [Parameter(Mandatory = $true)] $object
    )
    [void][System.Runtime.InteropServices.Marshal]::ReleaseComObject($object)
}

function Format-Title {
    param (
        $worksheet, [string]$title, [int]$row = 1
    )
    $worksheet.Cells.Item($row, 1).Value2 = $title
    $worksheet.Cells.Item($row, 1).Font.Bold = $true
    $worksheet.Cells.Item($row, 1).Font.Size = 14
    $worksheet.Cells.Item($row, 1).HorizontalAlignment = -4108

    $colCount = $worksheet.UsedRange.Columns.Count
    if ($colCount -gt 1) {
        $range = $worksheet.Range("A$row", $worksheet.Cells.Item($row, $colCount))
        $range.Merge()
        $range.HorizontalAlignment = -4108
    }
}

# ======================= INICIO DE PROCESO =======================

$latestFile = Get-LatestFile -folder $inputFolder -pattern "MCI-TAERMI-*.xls"

if (-not $latestFile) {
    Write-Output "‚ùå No se encontr√≥ un archivo XLS v√°lido en $inputFolder"
    exit 1
}

$inputXls = $latestFile.FullName
$fileNameBase = [System.IO.Path]::GetFileNameWithoutExtension($inputXls)
$outputExcel = Join-Path $outputExcelPath "$fileNameBase`_proc.xls"
$outputPDF = Join-Path $outputPdfPath "$fileNameBase`_proc.pdf"

Write-Information "üìÑ Archivo encontrado: $inputXls"

# ======================= CREAR NUEVO LIBRO =======================

$initialPIDs = (Get-Process -Name "EXCEL" -ErrorAction SilentlyContinue).Id

$excelApp = New-Object -ComObject Excel.Application
$excelApp.Visible = $false
$workbook = $excelApp.Workbooks.Add()
$sheetDatos = $workbook.Sheets.Item(1)
$sheetDatos.Name = "Datos"

# ======================= LEER ARCHIVO DE ORIGEN =======================

$sourceExcel = New-Object -ComObject Excel.Application
$sourceExcel.Visible = $false
$sourceWorkbook = $sourceExcel.Workbooks.Open($inputXls)
$sourceSheet = $sourceWorkbook.Sheets.Item(1)

$headers = 1..$sourceSheet.UsedRange.Columns.Count | ForEach-Object {
    $sourceSheet.Cells.Item(1, $_).Text
}

$data = for ($row = 2; $row -le $sourceSheet.UsedRange.Rows.Count; $row++) {
    $rowData = for ($col = 1; $col -le $sourceSheet.UsedRange.Columns.Count; $col++) {
        if ($col -in 6, 8, 9, 12, 13) {
            $sourceSheet.Cells.Item($row, $col).Value2
        }
        else {
            $sourceSheet.Cells.Item($row, $col).Text
        }
    }
    , $rowData
}

# Cerrar archivo de origen
$sourceWorkbook.Close($false)
$sourceExcel.Quit()
Invoke-ComObjectRelease -object $sourceSheet
Invoke-ComObjectRelease -object $sourceWorkbook
Invoke-ComObjectRelease -object $sourceExcel

# ======================= CONSTRUIR HOJA "DATOS" =======================

# Extraer la fecha del nombre del archivo
if ($fileNameBase -match 'MCI-TAERMI-(\d{2})-(\d{2})-(\d{4})') {
    $day = $matches[1]
    $month = $matches[2]
    $year = $matches[3]
    $date = "$day/$month/$year"
}
else {
    # Si no se encuentra el formato esperado, usar la fecha actual como respaldo
    $date = (Get-Date).ToString("dd/MM/yyyy")
}

Format-Title -worksheet $sheetDatos -title "TAERMI % DEL $date"
$sheetDatos.Range("A1", $sheetDatos.Cells.Item(1, $headers.Length)).Merge()

# Subt√≠tulo
$sheetDatos.Cells.Item(2, 1).Value2 = "Datos Generados"
$sheetDatos.Range("A2").Font.Bold = $true
$sheetDatos.Range("A2").Font.Size = 12
$sheetDatos.Range("A2").HorizontalAlignment = -4108
$sheetDatos.Range("A2", $sheetDatos.Cells.Item(2, $headers.Length)).Merge()

# Encabezados
for ($i = 0; $i -lt $headers.Length; $i++) {
    $sheetDatos.Cells.Item(3, $i + 1).Value2 = $headers[$i]
}
$headerRange = $sheetDatos.Range("A3", $sheetDatos.Cells.Item(3, $headers.Length))
$headerRange.Font.Bold = $true
$headerRange.Interior.ColorIndex = 36
$headerRange.Borders.LineStyle = 1

# Datos
for ($row = 0; $row -lt $data.Length; $row++) {
    for ($col = 0; $col -lt $headers.Length; $col++) {
        $value = $data[$row][$col]
        if ($col -eq 8 -or $col -eq 9) {
            try {
                $sheetDatos.Cells.Item($row + 4, $col + 1).Value2 = [datetime]$value
            }
            catch {
                $sheetDatos.Cells.Item($row + 4, $col + 1).Value2 = $value
            }
        }
        elseif ($col -eq 11 -or $col -eq 12) {
            $sheetDatos.Cells.Item($row + 4, $col + 1).Value2 = [double]$value
        }
        else {
            $sheetDatos.Cells.Item($row + 4, $col + 1).Value2 = [string]$value
        }
    }
}

# Formato de fechas y n√∫meros
$sheetDatos.Range("H4", $sheetDatos.Cells.Item($data.Count + 3, 8)).NumberFormat = "dd/mm/aaaa hh:mm:ss"
$sheetDatos.Range("I4", $sheetDatos.Cells.Item($data.Count + 3, 9)).NumberFormat = "dd/mm/aaaa hh:mm:ss"
$sheetDatos.Range("L4", $sheetDatos.Cells.Item($data.Count + 3, 12)).NumberFormat = "0"
$sheetDatos.Range("M4", $sheetDatos.Cells.Item($data.Count + 3, 13)).NumberFormat = "0"

# Alineaci√≥n
8..10 | ForEach-Object { $sheetDatos.Columns.Item($_).HorizontalAlignment = -4131 }

# ======================= ORDENAR POR HORAS =======================

$sortRange = $sheetDatos.Range("A3", $sheetDatos.Cells.Item($data.Count + 3, $headers.Length))
$sheetDatos.Sort.SortFields.Clear()
$sheetDatos.Sort.SortFields.Add($sheetDatos.Range("L3", "L$($data.Count + 3)"), 0, 2)
$sheetDatos.Sort.SetRange($sortRange)
$sheetDatos.Sort.Header = 1
$sheetDatos.Sort.Apply()

# ======================= RESALTAR FILAS CON > 96 HORAS =======================

for ($row = 4; $row -le ($data.Count + 3); $row++) {
    $horas = $sheetDatos.Cells.Item($row, 12).Value2
    if ($horas -gt 96) {
        $fila = $sheetDatos.Range("A$row", $sheetDatos.Cells.Item($row, $headers.Length))
        $fila.Interior.ColorIndex = 6
    }
}

# ======================= ESTAD√çSTICAS =======================

$sheetStats = $workbook.Sheets.Add()
$sheetStats.Name = "Estadisticas"
Format-Title -worksheet $sheetStats -title "TAERMI % DEL $date"
$range = $sheetStats.Range("A1", $sheetStats.Cells.Item(1, 3))
$range.Merge()

$sheetStats.Cells.Item(2, 1).Value2 = "Estadisticas"
$sheetStats.Cells.Item(2, 1).Font.Bold = $true
$sheetStats.Cells.Item(2, 1).Font.Size = 16
$sheetStats.Cells.Item(2, 1).HorizontalAlignment = -4108
$rangeStats = $sheetStats.Range("A2", "B2")
$rangeStats.Merge()

# M√©tricas
$labels = @("TLT horas", "Q expedientes A", "Q expedientes B", "A/B", "TAERMI%", "Horas promedio atencion")
for ($i = 0; $i -lt $labels.Count; $i++) {
    $sheetStats.Cells.Item($i + 3, 1).Value2 = $labels[$i]
}

# F√≥rmulas
$lastRow = $sheetDatos.UsedRange.Rows.Count
$sheetStats.Cells.Item(3, 2).Value2 = "96 horas"
$sheetStats.Cells.Item(4, 2).Formula = "=COUNTIF(Datos!L4:L$lastRow, ""<96"")"
$sheetStats.Cells.Item(5, 2).Formula = "=COUNTA(Datos!A4:A$lastRow)"
$sheetStats.Cells.Item(6, 2).Formula = "=COUNTIF(Datos!L4:L$lastRow, ""<96"") / COUNTA(Datos!A4:A$lastRow)"
$sheetStats.Cells.Item(7, 2).Formula = "=COUNTIF(Datos!L4:L$lastRow, ""<96"") / COUNTA(Datos!A4:A$lastRow) * 100"
$sheetStats.Cells.Item(8, 2).Formula = "=AVERAGE(Datos!L4:L$lastRow)"

# Formato
$sheetStats.Range("A2:A8").Font.Bold = $true
$sheetStats.Range("A2:A8").Interior.ColorIndex = 36
$sheetStats.Range("A2:B8").Borders.LineStyle = 1
$sheetStats.Range("A2:B8").HorizontalAlignment = -4108
$sheetStats.Cells.Item(6, 2).NumberFormat = "0,00"
$sheetStats.Cells.Item(7, 2).NumberFormat = "0,00" 
$sheetStats.Cells.Item(8, 2).NumberFormat = "0,00" 
$sheetStats.Columns.AutoFit()

# KPI visual
$kpiCell = $sheetStats.Cells.Item(7, 2)
Switch -Regex ($kpiCell.Value2) {
    { $_ -gt 80 } { $kpiCell.Interior.ColorIndex = 4; break }
    { $_ -eq 80 } { $kpiCell.Interior.ColorIndex = 6; break }
    default { $kpiCell.Interior.ColorIndex = 3 }
}


# ======================= EXPORTAR A PDF =======================

# Crear hoja temporal para impresi√≥n
$tempSheet = $workbook.Sheets.Add()
$tempSheet.Name = "Temporal"

# Copiar hoja de estad√≠sticas (valores)
$sheetStats.UsedRange.Copy()
$tempSheet.Range("A1").PasteSpecial(-4104)

# Fila de inicio para copiar datos adicionales
$rowStart = $sheetStats.UsedRange.Rows.Count + 2
$lastRow = $sheetDatos.UsedRange.Rows.Count

# Copiar columnas espec√≠ficas desde hoja "Datos"
$sheetDatos.Range("F2:F$lastRow").Copy()
$tempSheet.Range("A$rowStart").PasteSpecial(-4104)
$sheetDatos.Range("H2:H$lastRow").Copy()
$tempSheet.Range("B$rowStart").PasteSpecial(-4104)
$sheetDatos.Range("I2:I$lastRow").Copy()
$tempSheet.Range("C$rowStart").PasteSpecial(-4104)
$sheetDatos.Range("J2:J$lastRow").Copy()
$tempSheet.Range("D$rowStart").PasteSpecial(-4104)
$sheetDatos.Range("L2:L$lastRow").Copy()
$tempSheet.Range("E$rowStart").PasteSpecial(-4104)

# Ajustar anchos de columna
$tempSheet.Columns("A").ColumnWidth = 16.5
$tempSheet.Columns("B").ColumnWidth = 20
$tempSheet.Columns("C").ColumnWidth = 20
$tempSheet.Columns("D").AutoFit()
$tempSheet.Columns("E").ColumnWidth = 13

# Exportar como PDF
$tempSheet.ExportAsFixedFormat(0, $outputPDF)

# Desactivar confirmaciones de Excel
$excelApp.DisplayAlerts = $false

# Activar otra hoja antes de borrar
$workbook.Sheets.Item("Estadisticas").Activate()

# Eliminar hoja temporal
$workbook.Sheets.Item("Temporal").Delete()

# ======================= GUARDAR Y CERRAR =======================

$workbook.SaveAs($outputExcel, 56)
$workbook.Close($false)
$excelApp.Quit()

Invoke-ComObjectRelease -object $sheetDatos
Invoke-ComObjectRelease -object $sheetStats
Invoke-ComObjectRelease -object $workbook
Invoke-ComObjectRelease -object $excelApp
[GC]::Collect()
[GC]::WaitForPendingFinalizers()

Close-ExcelProcess -initialPIDs $initialPIDs