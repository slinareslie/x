$csvPath = "D:\Ordenar Scripts\Scripts probar\Transportista Descargar\consulta_resultado.csv"
$excelPath = "D:\Ordenar Scripts\Scripts probar\Transportista Descargar\consulta_resultado.xlsx"

# Leer CSV como texto (todas las columnas ser√°n tratadas como texto)
$csvData = Import-Csv -Path $csvPath

# Iniciar Excel
$excelApp = New-Object -ComObject Excel.Application
$excelApp.Visible = $false
$excelApp.DisplayAlerts = $false

# Crear nuevo libro
$workbook = $excelApp.Workbooks.Add()
$worksheet = $workbook.Sheets.Item(1)

# Escribir encabezados
$colIndex = 1
$csvData[0].PSObject.Properties.Name | ForEach-Object {
    $worksheet.Cells.Item(1, $colIndex).Value2 = $_
    $colIndex++
}

# Escribir los datos
$rowIndex = 2
foreach ($row in $csvData) {
    $colIndex = 1
    foreach ($col in $row.PSObject.Properties.Value) {
        $worksheet.Cells.Item($rowIndex, $colIndex).Value2 = $col
        $colIndex++
    }
    $rowIndex++
}

# Formatear columnas F (6), G (7), L (12) y M (13) como fecha "dd/MM/yyyy"
$columnsToFormat = @(6, 7, 12, 13)
foreach ($col in $columnsToFormat) {
    $range = $worksheet.Range(
        $worksheet.Cells.Item(2, $col),
        $worksheet.Cells.Item($csvData.Count + 1, $col)
    )
    # Convertir texto "yyyymmdd" a fecha y aplicar formato personalizado
    foreach ($cell in $range.Cells) {
        $raw = $cell.Value2
        if ($raw -match "^\d{8}$") {
            $dateStr = $raw.Substring(0,4) + "-" + $raw.Substring(4,2) + "-" + $raw.Substring(6,2)
            $date = [datetime]::ParseExact($dateStr, "yyyy-MM-dd", $null)
            $cell.Value2 = $date
            $cell.NumberFormat = "dd/mm/yyyy"
        }
    }
}

# Crear tabla con nombre
$lastColumn = $csvData[0].PSObject.Properties.Count
$lastRow = $csvData.Count + 1
$tableRange = $worksheet.Range("A1", $worksheet.Cells.Item($lastRow, $lastColumn))
$table = $worksheet.ListObjects.Add(1, $tableRange, $null, 1)
$table.Name = "TablaSigad"

# Guardar
$workbook.SaveAs($excelPath, [Microsoft.Office.Interop.Excel.XlFileFormat]::xlOpenXMLWorkbook)
$workbook.Close($false)
$excelApp.Quit()

# Liberar
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($table) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($worksheet) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($excelApp) | Out-Null
[GC]::Collect()
[GC]::WaitForPendingFinalizers()
