$csvPath = "D:\Ordenar Scripts\Scripts probar\Transportista Descargar\consulta_resultado.csv"
$excelPath = "D:\Ordenar Scripts\Scripts probar\Transportista Descargar\consulta_resultado.xlsx"

# Leer CSV usando el delimitador ";"
$lines = Get-Content -Path $csvPath
if ($lines.Count -eq 0) {
    Write-Host "El archivo CSV está vacío."
    exit
}

# Separar encabezados y datos
$headers = $lines[0].Split(';')
$dataLines = $lines[1..($lines.Count - 1)]

# Iniciar Excel
$excelApp = New-Object -ComObject Excel.Application
$excelApp.Visible = $false
$excelApp.DisplayAlerts = $false

# Crear nuevo libro
$workbook = $excelApp.Workbooks.Add()
$worksheet = $workbook.Sheets.Item(1)

# Escribir encabezados
for ($i = 0; $i -lt $headers.Count; $i++) {
    $worksheet.Cells.Item(1, $i + 1).Value2 = $headers[$i]
}

# Escribir datos como texto
for ($row = 0; $row -lt $dataLines.Count; $row++) {
    $cols = $dataLines[$row].Split(';')
    for ($col = 0; $col -lt $cols.Count; $col++) {
        $cell = $worksheet.Cells.Item($row + 2, $col + 1)
        $value = $cols[$col]

        # Si es columna F (6), G (7), L (12) o M (13), intentar convertir fecha
        if (($col + 1) -in @(6, 7, 12, 13) -and $value -match '^\d{8}$') {
            $dateStr = $value.Substring(0,4) + "-" + $value.Substring(4,2) + "-" + $value.Substring(6,2)
            try {
                $date = [datetime]::ParseExact($dateStr, "yyyy-MM-dd", $null)
                $cell.Value2 = $date
                $cell.NumberFormat = "dd/mm/yyyy"
            } catch {
                $cell.Value2 = $value  # Si falla, lo deja como texto
                $cell.NumberFormat = "@"
            }
        } else {
            # Forzar a texto
            $cell.NumberFormat = "@"
            $cell.Value2 = $value
        }
    }
}

# Crear tabla "TablaSigad"
$lastRow = $dataLines.Count + 1
$lastCol = $headers.Count
$tableRange = $worksheet.Range("A1", $worksheet.Cells.Item($lastRow, $lastCol))
$table = $worksheet.ListObjects.Add(1, $tableRange, $null, 1)
$table.Name = "TablaSigad"

# Guardar como .xlsx
$workbook.SaveAs($excelPath, [Microsoft.Office.Interop.Excel.XlFileFormat]::xlOpenXMLWorkbook)
$workbook.Close($false)
$excelApp.Quit()

# Limpiar
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($table) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($worksheet) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($excelApp) | Out-Null
[GC]::Collect()
[GC]::WaitForPendingFinalizers()
